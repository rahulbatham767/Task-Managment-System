// apiSlice.js
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { getlogin, logOut, register } from "./User";
import { addtask, deletetask, showtask, updatetask } from "./Api";

export const getLogin = createAsyncThunk(
  "user/getLogin",
  async (data, thunkAPI) => {
    try {
      const response = await getlogin(data);
      return response.data;
    } catch (error) {
      throw new Error("Error during login: " + thunkAPI.rejectWithValue);
    }
  }
);

export const getRegister = createAsyncThunk(
  "user/getRegister",
  async (data, thunkAPI) => {
    try {
      const response = await register(data);
      return response.data;
    } catch (error) {
      throw new Error("Error during registration: " + thunkAPI.rejectWithValue);
    }
  }
);

export const logout = createAsyncThunk("user/logout", async (_, thunkAPI) => {
  try {
    const response = await logOut();
    // console.log(response);

    return response.data;
  } catch (error) {
    console.error("Error during logout:", error.message);
    return thunkAPI.rejectWithValue(error.message);
  }
});
export const updateTask = createAsyncThunk(
  "user/updateTask",
  async (data, thunkAPI) => {
    try {
      const response = await updatetask(data);
      return response.data;
    } catch (error) {
      throw new Error("Error during task update: " + thunkAPI.rejectWithValue);
    }
  }
);

export const deleteTask = createAsyncThunk(
  "user/deleteTask",
  async (data, thunkAPI) => {
    try {
      const response = await deletetask(data);
      return response.data;
    } catch (error) {
      throw new Error(
        "Error during task deletion: " + thunkAPI.rejectWithValue
      );
    }
  }
);

export const showTask = createAsyncThunk(
  "user/showTask",
  async (_, thunkAPI) => {
    try {
      const response = await showtask();
      return response;
    } catch (error) {
      throw new Error(
        "Error during task retrieval: " + thunkAPI.rejectWithValue
      );
    }
  }
);

export const addTask = createAsyncThunk(
  "user/addTask",
  async (data, thunkAPI) => {
    try {
      const response = await addtask(data);
      return response.data;
    } catch (error) {
      throw new Error(
        "Error during task addition: " + thunkAPI.rejectWithValue
      );
    }
  }
);

// Create a Redux slice
const ApiSlice = createSlice({
  name: "user",
  initialState: {
    isLoading: false,
    userInfo: null,
    token: "",
    loggedIn: false,
    task: {
      msg: "",
      type: "",
      updated: "",
      data: [],
    },
  },
  reducers: {},
  extraReducers: (builder) => {
    // Handle actions generated by the getLogin thunk
    builder
      // Get Login
      .addCase(getRegister.fulfilled, (state, action) => {
        // Handle the successful login
        state.loggedIn = false;
        state.isLoading = false;
        state.task.msg = "Registration Successful";
        state.task.updated = true;
        state.task.type = "success";
      })
      .addCase(getRegister.pending, (state, action) => {
        state.loggedIn = false;
        state.isLoading = true;
        state.task.updated = false;
      })
      .addCase(getRegister.rejected, (state, action) => {
        console.log(action.payload);

        state.loggedIn = false;
        state.isLoading = false;
        state.task.msg = action.payload;
        state.task.type = "warning";
      })
      .addCase(getLogin.fulfilled, (state, action) => {
        // Handle the successful login
        state.loggedIn = true;
        state.token = action.payload.authtoken;
        state.isLoading = false;
        state.task.msg = "Login Successful";
        state.task.type = "success";
        state.task.updated = true;
      })
      .addCase(getLogin.pending, (state, action) => {
        // Handle the pending state during login
        state.loggedIn = false;
        state.task.updated = false;
        state.isLoading = true;
      })
      .addCase(getLogin.rejected, (state, action) => {
        // Handle the rejected state during login
        state.loggedIn = false;
        state.task.updated = false;
        state.isLoading = false;
        state.task.msg = "username or password is wrong";
        state.task.type = "warning";
      })
      // Get Logout
      .addCase(logout.fulfilled, (state, action) => {
        state.loggedIn = false;
        console.log(action.payload);
        state.task.updated = true;
        state.task.msg = action.payload;
        state.task.type = "success";
        state.token = "";
      })
      .addCase(logout.pending, (state, action) => {
        state.loggedIn = true;
        state.task.updated = false;
      })
      .addCase(logout.rejected, (state, action) => {
        state.loggedIn = true;
        state.task.updated = false;

        state.task.msg = action.payload;
      })
      // Add Task
      .addCase(addTask.pending, (state, action) => {
        // Handle the pending state during login
        state.isLoading = true;
        state.loggedIn = true;
        state.task.updated = false;
      })
      .addCase(addTask.rejected, (state, action) => {
        state.loggedIn = true;
        state.task.updated = false;
        state.isLoading = false;
        state.task.msg = "Task is Not added to the list";
        state.task.type = "warning";
      })
      .addCase(addTask.fulfilled, (state, action) => {
        state.loggedIn = true;
        state.task.status = "Added Successfully";
        state.task.msg = "Task Added Successful";
        state.task.type = "success";
        state.task.updated = true;
      })
      // show Task
      .addCase(showTask.pending, (state, action) => {
        state.loggedIn = true;
        state.task.updated = false;
        state.isLoading = true;
      })
      .addCase(showTask.rejected, (state, action) => {
        state.loggedIn = true;
        state.task.updated = false;
        state.isLoading = false;
        state.task.msg = "Something Went Wrong";
        state.task.type = "warning";
      })
      .addCase(showTask.fulfilled, (state, action) => {
        state.loggedIn = true;
        console.log(action.payload);
        state.task.updated = false;
        state.task.data = action.payload;
      })
      // updated Task
      .addCase(updateTask.pending, (state, action) => {
        state.loggedIn = true;
        state.task.updated = false;
        state.isLoading = true;
      })
      .addCase(updateTask.rejected, (state, action) => {
        state.loggedIn = true;
        state.task.updated = false;
        state.isLoading = false;
        state.task.msg = "Task is not updated";
        state.task.type = "warning";
      })
      .addCase(updateTask.fulfilled, (state, action) => {
        state.loggedIn = true;
        state.task.updated = true;
        state.task.msg = action.payload;
        state.task.updated = true;
        state.task.type = "info";
      })
      .addCase(deleteTask.pending, (state, action) => {
        state.loggedIn = true;
        state.task.updated = false;
        state.isLoading = false;
      })
      .addCase(deleteTask.rejected, (state, action) => {
        state.loggedIn = true;
        state.task.updated = false;
        state.isLoading = false;
        state.task.msg = "Task is Not Deleted";
        state.task.type = "warning";
      })
      .addCase(deleteTask.fulfilled, (state, action) => {
        state.loggedIn = true;
        state.task.msg = action.payload;
        state.task.updated = true;
        state.task.type = "success";
      });
  },
});

// Export the actions generated by the slice
export default ApiSlice.reducer;
